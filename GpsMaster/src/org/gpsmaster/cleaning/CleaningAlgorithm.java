package org.gpsmaster.cleaning;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;

import org.gpsmaster.dialogs.CleaningStats;
import org.gpsmaster.gpxpanel.Waypoint;
import org.gpsmaster.gpxpanel.WaypointGroup;
import org.gpsmaster.markers.RemoveMarker;
import org.gpsmaster.markers.Marker;
import org.jfree.ui.HorizontalAlignment;

import eu.fuegenstein.util.CommonParameter;

/**
 * Base class for classes implementing track cleaning
 * functionality by removing certain points from tracks
 * 
 * @author rfu
 *
 * TODO support List<WaypointGroup> instead of just one {@link WaypointGroup}
 */
public abstract class CleaningAlgorithm {

	private JPanel algorithmPanel = null;
	private CleaningStats statPanel = null; 
	protected List<CommonParameter> parameters = new ArrayList<CommonParameter>();
	
	protected WaypointGroup waypointGroup = null;
	protected List<Marker> markerList = null;
	protected List<Waypoint> toDelete = new ArrayList<Waypoint>();
	protected List<Waypoint> trackpoints = null; // shortcut
	
	/**
	 * Default constructor
	 */
	public CleaningAlgorithm() {
		// makePanel();
	}
	
	public void setWaypointGroup(WaypointGroup waypointGroup) {
		this.waypointGroup = waypointGroup;
		trackpoints = waypointGroup.getWaypoints();		
	}
	
	/**
	 * Waypoints to be deleted will be added as Markers to this list
	 * for preview on the {@link GPXPanel}
	 * @param markers List of markers from {@link GPXPanel}
	 */
	public void setMarkerList(List<Marker> markers) {
		markerList = markers;
	}

	/**
	 * perform cleaning - remove obsolete trackpoints
	 */
	public void doClean() {

		if (toDelete.size() == 0) {
			applyAlgorithm();
		}
		for (Waypoint wpt : toDelete) {
			waypointGroup.getWaypoints().remove(wpt);
		}
		waypointGroup.updateAllProperties();
		clear();
	}
	
	/**
	 * determine all Trackpoints to be deleted
	 * and add them to markerList for preview
	 */
	public void preview() {
		clear();
		applyAlgorithm();
		populateMarkerList();
		if (statPanel != null) {
			statPanel.setStats(getAffected(), waypointGroup.getNumPts());
		}
	}

	/**
	 * 
	 * @return number of trackpoints affected by this algorithm
	 */
	public long getAffected() {
		if (toDelete.size() == 0) {
			applyAlgorithm();
		}
		return toDelete.size();
	}
	
	/**
	 * 
	 * @return String containing the name of this algorithm
	 */
	public abstract String getName();
	
	/**
	 * 
	 * @return String containing a short description of this algorithm
	 */
	public abstract String getDescription();
	
	public List<CommonParameter> getParameters() {
		return parameters;
	}


	/**
	 * Create a {@link JPanel} containing all GUI elements for this algorithm
	 * @param backGroundColor panel's Background color
	 * @return {@link JPanel} containing GUI elements
	 */
	public JPanel getPanel(Color backGroundColor) {
		if (algorithmPanel == null) {
			algorithmPanel = new JPanel();
			makePanel(backGroundColor);
		}
		return algorithmPanel;
	}

	/**
	 * 
	 * @return {@link JPanel} containing all GUI elements for this algorithm
	 */
	public JPanel getPanel() {
		if (algorithmPanel != null) {
			return algorithmPanel;
		}
		return getPanel(Color.WHITE);
	}
	
	/**
	 * reset class 
	 */
	public void clear() {
		clearMarkerList();
		toDelete.clear();
		if (statPanel != null) {
			statPanel.clear();
		}
	}

	/**
	 * find all obsolete Trackpoints 
	 */
	protected abstract void applyAlgorithm();
	
	/**
	 * add all Waypoints to be deleted as Markers to MarkerList
	 */
	protected void populateMarkerList() {
		if (markerList != null) {
			for (Waypoint wpt : toDelete) {
				RemoveMarker marker = new RemoveMarker(wpt);
				marker.setMarkerPosition(Marker.POSITION_CENTER);
				markerList.add(marker);
			}
		}
	}

	/**
	 * remove preview markers from markerList
	 */
	protected void clearMarkerList() {
		if (markerList != null) {
			List<Marker> deleteList = new ArrayList<Marker>();		
			for (Marker marker : markerList) {
				// caveat: remove only markers generated by this.subclass
				if (marker instanceof RemoveMarker) {
					deleteList.add(marker);
				}
			}
			for (Marker marker : deleteList) {
				markerList.remove(marker);	
			}			
		}		
	}
	
	/**
	 * Create the {@link JPanel} containing all GUI components for this algorithm
	 */
	protected void makePanel(Color backgroundColor) {
		
		// algorithmPanel.setPreferredSize(new Dimension(10,  10));
		algorithmPanel.setLayout(new BoxLayout(algorithmPanel, BoxLayout.Y_AXIS));	
		algorithmPanel.setBackground(backgroundColor);
		
		Font nameFont = new Font(algorithmPanel.getFont().getFamily(), Font.BOLD, algorithmPanel.getFont().getSize() + 2);
		JLabel nameLabel = new JLabel();
		nameLabel.setFont(nameFont);
		nameLabel.setText(getName());
		nameLabel.setAlignmentX(0.0f);
		algorithmPanel.add(nameLabel);
		
		if (getDescription().isEmpty() == false) {
			JTextArea descLabel = new JTextArea();
			descLabel.setFont(algorithmPanel.getFont());
			descLabel.setPreferredSize(new Dimension(220, 120));
			descLabel.setText(getDescription());
			descLabel.setEditable(false);
			descLabel.setLineWrap(true);
			descLabel.setWrapStyleWord(true);
			descLabel.setAlignmentX(0.0f);
			algorithmPanel.add(descLabel);
			// algorithmPanel.add(new JSeparator(JSeparator.HORIZONTAL));
		}
		
		for (CommonParameter p : parameters) {
			JPanel paramPanel = p.getGuiComponent();
			paramPanel.setAlignmentX(0.0f);
			algorithmPanel.add(paramPanel);
		}
		
		statPanel = new CleaningStats();
		statPanel.setBackground(backgroundColor);	
		statPanel.setBorder(new EmptyBorder(3, 0,  0, 0));
		statPanel.setAlignmentX(0.0f);
		algorithmPanel.add(statPanel);	
		
	}
	
}
